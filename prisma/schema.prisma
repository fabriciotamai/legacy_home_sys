datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  USER
}

enum UserType {
  INDIVIDUAL
  BUSINESS
}

enum ContractType {
  MONEY
  PROPERTY
  HYBRID
}

enum InvestmentType {
  MONEY
  PROPERTY
}

enum InterestStatus {
  PENDING
  IN_CONTACT
  APPROVED
  REJECTED
}

enum ComplianceStatus {
  PENDING_EMAIL
  PENDING_ADDRESS
  PENDING_DOCUMENTS
  UNDER_REVIEW
  APPROVED
  REJECTED
}

enum DocumentType {
  RG
  CNH
  PASSPORT
}

enum EnterpriseStatus {
  NEW
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum ContractTemplateType {
  TYPE1
  TYPE2
  TYPE3
}

enum ContractStatus {
  PENDING
  SIGNED
  CANCELLED
}

enum ConstructionType {
  HOUSE
  LAND
  APARTMENT
  COMMERCIAL
}

enum WalletTransactionType {
  CREDIT
  DEBIT
  PIX
  TRANSFER
}

enum EnterpriseChangeType {
  STATUS_CHANGED
  PHASE_CHANGED
  TASK_CHANGED
}

model User {
  id                 Int                 @id @default(autoincrement())
  email              String              @unique
  username           String              @unique
  password           String
  firstName          String
  lastName           String
  birthDate          DateTime?
  userType           UserType
  numberDocument     String?             @unique
  phone              String?
  documentType       DocumentType?
  documentFront      String?
  documentBack       String?
  proofOfAddress     String?
  incomeTaxProof     String?
  mustChangePassword Boolean             @default(true)
  tokenVersion       Int                 @default(0)
  role               Role                @default(USER)
  isApproved         Boolean             @default(false)
  complianceStatus   ComplianceStatus    @default(PENDING_ADDRESS)
  twoFA              String?
  isActive           Boolean             @default(true)
  walletBalance      Float?              @default(0.0)
  totalInvested      Float?              @default(0.0)
  totalValuation     Float?              @default(0.0)
  emailVerified      Boolean             @default(false)
  addresses          Address[]
  contracts          Contract[]
  contractInterests  ContractInterest[]
  contractSignatures ContractSignature[]
  walletTransactions WalletTransaction[]
  investments        Investment[]
  interestLogs       InterestLog[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  @@index([isApproved])
}

model Address {
  id           Int      @id @default(autoincrement())
  street       String
  number       String
  complement   String?
  neighborhood String
  city         String
  state        String
  postalCode   String
  country      String
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model WalletTransaction {
  id            Int                   @id @default(autoincrement())
  userId        Int
  user          User                  @relation(fields: [userId], references: [id])
  type          WalletTransactionType
  amount        Float
  balanceBefore Float
  balanceAfter  Float
  description   String
  createdAt     DateTime              @default(now())
}

model Investment {
  id             Int        @id @default(autoincrement())
  userId         Int
  user           User       @relation(fields: [userId], references: [id])
  enterpriseId   Int
  enterprise     Enterprise @relation(fields: [enterpriseId], references: [id])
  investedAmount Float
  createdAt      DateTime   @default(now())
}

model EnterpriseChangeLog {
  id           Int                  @id @default(autoincrement())
  enterpriseId Int
  enterprise   Enterprise           @relation(fields: [enterpriseId], references: [id])
  changeType   EnterpriseChangeType
  description  String
  metadata     Json?
  createdAt    DateTime             @default(now())
}

model InterestLog {
  id           Int            @id @default(autoincrement())
  userId       Int
  user         User           @relation(fields: [userId], references: [id])
  enterpriseId Int
  enterprise   Enterprise     @relation(fields: [enterpriseId], references: [id])
  interestId   String
  status       InterestStatus
  reason       String?
  createdAt    DateTime       @default(now())
}

model Enterprise {
  id                Int                     @id @default(autoincrement())
  name              String                  @unique
  corporateName     String
  description       String
  status            EnterpriseStatus        @default(NEW)
  isAvailable       Boolean                 @default(false)
  investmentType    InvestmentType
  constructionType  ConstructionType
  fundingAmount     Float                   @default(0.0)
  transferAmount    Float                   @default(0.0)
  postalCode        String
  address           String
  city              String
  squareMeterValue  Float
  area              Float
  progress          Float                   @default(0.0)
  floors            Int?
  completionDate    DateTime?
  startDate         DateTime?
  currentPhaseId    Int?
  currentPhase      Phase?                  @relation(fields: [currentPhaseId], references: [id])
  currentTaskId     Int?
  currentTask       Task?                   @relation(fields: [currentTaskId], references: [id])
  taskStatuses      EnterpriseTaskStatus[]
  phaseStatuses     EnterprisePhaseStatus[]
  contracts         Contract[]
  contractInterests ContractInterest[]
  investments       Investment[]
  changeLogs        EnterpriseChangeLog[]
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
  InterestLog       InterestLog[]

  @@index([status, investmentType])
}

model Contract {
  id           String               @id @default(uuid())
  type         ContractType
  templateType ContractTemplateType
  documentUrl  String?
  status       ContractStatus       @default(PENDING)
  signedAt     DateTime?
  user         User                 @relation(fields: [userId], references: [id])
  userId       Int
  enterprise   Enterprise           @relation(fields: [enterpriseId], references: [id])
  enterpriseId Int
  signatures   ContractSignature[]
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
}

model ContractSignature {
  id         Int       @id @default(autoincrement())
  contract   Contract  @relation(fields: [contractId], references: [id])
  contractId String
  user       User?     @relation(fields: [userId], references: [id])
  userId     Int?
  role       Role
  signedAt   DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model ContractInterest {
  interestId   String         @id @default(dbgenerated("substring(md5(random()::text), 1, 8)"))
  user         User           @relation(fields: [userId], references: [id])
  userId       Int
  enterprise   Enterprise     @relation(fields: [enterpriseId], references: [id])
  enterpriseId Int
  status       InterestStatus @default(PENDING)
  createdAt    DateTime       @default(now())
}

model Phase {
  id                    Int                     @id @default(autoincrement())
  phaseName             String
  description           String
  order                 Int
  tasks                 Task[]
  enterprises           Enterprise[]
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  EnterprisePhaseStatus EnterprisePhaseStatus[]
}

model EnterprisePhaseStatus {
  enterpriseId Int
  phaseId      Int
  progress     Float      @default(0.0)
  updatedAt    DateTime   @updatedAt
  createdAt    DateTime   @default(now())
  enterprise   Enterprise @relation(fields: [enterpriseId], references: [id])
  phase        Phase      @relation(fields: [phaseId], references: [id])

  @@id([enterpriseId, phaseId])
}

model Task {
  id           Int                    @id @default(autoincrement())
  taskName     String
  description  String
  phaseId      Int
  phase        Phase                  @relation(fields: [phaseId], references: [id])
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  taskProgress EnterpriseTaskStatus[]
  Enterprise   Enterprise[]
}

model EnterpriseTaskStatus {
  enterpriseId Int
  taskId       Int
  isCompleted  Boolean    @default(false)
  updatedAt    DateTime   @updatedAt
  createdAt    DateTime   @default(now())
  enterprise   Enterprise @relation(fields: [enterpriseId], references: [id])
  task         Task       @relation(fields: [taskId], references: [id])

  @@id([enterpriseId, taskId])
}
