datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  USER
}

enum UserType {
  INDIVIDUAL
  BUSINESS
}

enum ContractType {
  MONEY
  PROPERTY
  HYBRID
}

enum TokenTransactionType {
  BUY
  SELL
  TRANSFER
}

enum DepositStatus {
  WAITING_PROOF
  PENDING
  APPROVED
  REJECTED
}

enum InvestmentType {
  MONEY
  PROPERTY
}

enum InterestStatus {
  PENDING
  IN_CONTACT
  APPROVED
  REJECTED
}

enum ComplianceStatus {
  PENDING_EMAIL
  PENDING_ADDRESS
  PENDING_DOCUMENTS
  UNDER_REVIEW
  APPROVED
  REJECTED
}

enum DocumentType {
  RG
  CNH
  PASSPORT
}

enum EnterpriseStatus {
  NEW
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum ContractTemplateType {
  TYPE1
  TYPE2
  TYPE3
}

enum ContractStatus {
  PENDING
  SIGNED
  CANCELLED
}

enum ConstructionType {
  HOUSE
  LAND
  APARTMENT
  COMMERCIAL
}

enum WalletTransactionType {
  CREDIT
  DEBIT
  PIX
  TRANSFER
}

enum NotificationType {
  DEPOSIT_APPROVED
  CONTRACT_SIGNED
  INVESTMENT_CONFIRMED
  SYSTEM_ALERT
  VALUTION_CHANGE
}

enum EnterpriseChangeType {
  STATUS_CHANGED
  PHASE_CHANGED
  TASK_CHANGED
}

model User {
  id                       Int                    @id @default(autoincrement())
  email                    String                 @unique
  username                 String                 @unique
  password                 String
  firstName                String
  lastName                 String
  birthDate                DateTime?
  avatar                   String?
  userType                 UserType
  numberDocument           String?                @unique
  phone                    String?
  passwordResetCode        String?
  passwordResetExpires     DateTime?
  documentType             DocumentType?
  documentFront            String?
  documentBack             String?
  proofOfAddress           String?
  incomeTaxProof           String?
  mustChangePassword       Boolean                @default(true)
  tokenVersion             Int                    @default(0)
  role                     Role                   @default(USER)
  isApproved               Boolean                @default(false)
  complianceStatus         ComplianceStatus       @default(PENDING_ADDRESS)
  twoFA                    String?
  isActive                 Boolean                @default(true)
  totalInvested            Float?                 @default(0.0)
  totalValuation           Float?                 @default(0.0)
  emailVerified            Boolean                @default(false)
  emailConfirmationCode    String?
  emailConfirmationExpires DateTime?
  address                  Address?
  contracts                Contract[]
  contractInterests        ContractInterest[]
  contractSignatures       ContractSignature[]
  investments              Investment[]
  interestLogs             InterestLog[]
  deposits                 Deposit[]
  notifications            Notification[]
  contractTemplates        ContractTemplate[]
  contractSignatureLogs    ContractSignatureLog[]
  tokenHolders             TokenHolder[]
  tokenTransactions        TokenTransaction[]
  wallet                   Wallet?
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @updatedAt

  @@index([isApproved])
}

model Address {
  id           Int      @id @default(autoincrement())
  street       String
  number       String
  complement   String?
  neighborhood String
  city         String
  state        String
  postalCode   String
  country      String
  user         User     @relation(fields: [userId], references: [id])
  userId       Int      @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Wallet {
  id           Int                 @id @default(autoincrement())
  userId       Int                 @unique
  user         User                @relation(fields: [userId], references: [id])
  fiatBalance  Decimal             @default(0.0)
  transactions WalletTransaction[]
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
}

model WalletTransaction {
  id            Int                   @id @default(autoincrement())
  walletId      Int
  wallet        Wallet                @relation(fields: [walletId], references: [id], onDelete: Cascade)
  type          WalletTransactionType
  amount        Decimal               @default(0.0)
  balanceBefore Decimal               @default(0.0)
  balanceAfter  Decimal               @default(0.0)
  description   String
  createdAt     DateTime              @default(now())

  @@index([walletId, createdAt])
}

model Investment {
  id             Int        @id @default(autoincrement())
  userId         Int
  user           User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  enterpriseId   Int
  enterprise     Enterprise @relation(fields: [enterpriseId], references: [id], onDelete: Cascade)
  investedAmount Float
  createdAt      DateTime   @default(now())
}

model EnterpriseChangeLog {
  id           Int                  @id @default(autoincrement())
  enterpriseId Int
  enterprise   Enterprise           @relation(fields: [enterpriseId], references: [id], onDelete: Cascade)
  changeType   EnterpriseChangeType
  description  String
  metadata     Json?
  createdAt    DateTime             @default(now())
}

model Deposit {
  id               Int           @id @default(autoincrement())
  userId           Int
  codeDeposit      String        @unique @default(dbgenerated("substring(md5(random()::text), 1, 8)"))
  user             User          @relation(fields: [userId], references: [id])
  amount           Float
  status           DepositStatus @default(WAITING_PROOF)
  proofUrl         String?
  adminComment     String?
  approvedAt       DateTime?
  balanceUpdatedAt DateTime?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
}

model InterestLog {
  id           Int            @id @default(autoincrement())
  userId       Int
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  enterpriseId Int
  enterprise   Enterprise     @relation(fields: [enterpriseId], references: [id], onDelete: Cascade)
  interestId   String
  status       InterestStatus
  reason       String?
  createdAt    DateTime       @default(now())
}

model FaqCategory {
  id   Int    @id @default(autoincrement())
  name String @unique
  faqs FAQ[]  @relation("FaqToCategory")
}

model FAQ {
  id          Int           @id @default(autoincrement())
  question    String
  answer      String
  categoryId  Int
  category    FaqCategory   @relation(fields: [categoryId], references: [id], name: "FaqToCategory")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  FAQRevision FAQRevision[]
}

model FAQRevision {
  id        Int      @id @default(autoincrement())
  faqId     Int
  faq       FAQ      @relation(fields: [faqId], references: [id])
  answer    String
  updatedAt DateTime @default(now())

  @@index([faqId])
}

model Enterprise {
  id                Int                   @id @default(autoincrement())
  name              String                @unique
  corporateName     String
  description       String
  status            EnterpriseStatus      @default(NEW)
  isAvailable       Boolean               @default(false)
  investmentType    InvestmentType
  constructionType  ConstructionType
  fundingAmount     Float                 @default(0.0)
  state             String?
  country           String?
  transferAmount    Float                 @default(0.0)
  coverImageUrl     String?
  postalCode        String
  address           String
  city              String
  squareMeterValue  Float
  area              Float
  progress          Float                 @default(0.0)
  floors            Int?
  contracts         Contract[]
  contractInterests ContractInterest[]
  investments       Investment[]
  token             Token?
  changeLogs        EnterpriseChangeLog[]
  InterestLog       InterestLog[]
  images            EnterpriseImage[]
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt

  @@index([status, createdAt])
}

model EnterpriseImage {
  id           Int        @id @default(autoincrement())
  enterpriseId Int
  enterprise   Enterprise @relation(fields: [enterpriseId], references: [id], onDelete: Cascade)
  imageUrl     String
  createdAt    DateTime   @default(now())

  @@index([enterpriseId])
}

model Contract {
  id                   String                 @id @default(uuid())
  type                 ContractType
  templateType         ContractTemplateType
  documentUrl          String?
  isTemplate           Boolean                @default(false)
  status               ContractStatus         @default(PENDING)
  signedAt             DateTime?
  isFinalized          Boolean                @default(false)
  filePath             String?
  clientSigningUrl     String?
  adminSigningUrl      String?
  content              String?
  envelopeId           String?                @unique(map: "unique_envelopeId")
  user                 User?                  @relation(fields: [userId], references: [id])
  userId               Int?
  enterprise           Enterprise             @relation(fields: [enterpriseId], references: [id])
  enterpriseId         Int
  signatures           ContractSignature[]
  ContractSignatureLog ContractSignatureLog[]
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt

  @@unique([envelopeId])
}

model ContractSignatureLog {
  id         Int      @id @default(autoincrement())
  contractId String
  contract   Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  userId     Int?
  user       User?    @relation(fields: [userId], references: [id])
  role       Role
  signedAt   DateTime
  createdAt  DateTime @default(now())

  @@index([contractId])
}

model ContractSignature {
  id         Int       @id @default(autoincrement())
  contract   Contract  @relation(fields: [contractId], references: [id], onDelete: Cascade)
  contractId String
  user       User?     @relation(fields: [userId], references: [id])
  userId     Int?
  role       Role
  signedAt   DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model ContractTemplate {
  id           String               @id @default(uuid())
  name         String
  type         ContractTemplateType
  fileMimeType String?
  filePath     String?
  fileData     Bytes?
  content      String?
  createdBy    Int
  admin        User                 @relation(fields: [createdBy], references: [id])
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
}

model ContractInterest {
  interestId   String         @id @default(dbgenerated("substring(md5(random()::text), 1, 8)"))
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  enterprise   Enterprise     @relation(fields: [enterpriseId], references: [id], onDelete: Cascade)
  enterpriseId Int
  status       InterestStatus @default(PENDING)
  createdAt    DateTime       @default(now())

  @@index([userId, status])
  @@index([enterpriseId, status])
}

model Token {
  id           Int                @id @default(autoincrement())
  enterprise   Enterprise         @relation(fields: [enterpriseId], references: [id])
  enterpriseId Int                @unique
  name         String
  totalSupply  Float
  price        Decimal            @default(0.0)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  holders      TokenHolder[]
  transactions TokenTransaction[]
}

model TokenHolder {
  id        Int      @id @default(autoincrement())
  token     Token    @relation(fields: [tokenId], references: [id])
  tokenId   Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  balance   Decimal  @default("0.0")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([tokenId, userId])
}

model TokenTransaction {
  id         Int                  @id @default(autoincrement())
  token      Token                @relation(fields: [tokenId], references: [id])
  tokenId    Int
  user       User                 @relation(fields: [userId], references: [id])
  userId     Int
  type       TokenTransactionType
  amount     Decimal
  totalValue Decimal
  createdAt  DateTime             @default(now())
}

model Notification {
  id        Int              @id @default(autoincrement())
  userId    Int
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  metadata  Json?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@index([userId, isRead])
}
