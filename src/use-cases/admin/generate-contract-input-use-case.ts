import { ContractRepository } from '@/repositories/contract-repository';
import { EnterpriseRepository } from '@/repositories/enterprise-repository';
import { UsersRepository } from '@/repositories/user-repository';
import { getDocusignAccessToken } from '@/services/docusign/docu-sigin-auth';
import { createEnvelopeOnDocusign } from '@/services/docusign/docu-sigin-envelope';
import { getEmbeddedSigningUrl } from '@/services/docusign/docu-signin-signin';
import { ContractStatus, ContractTemplateType, ContractType } from '@prisma/client';
import Docxtemplater from 'docxtemplater';
import fs from 'fs';
import path from 'path';
import PizZip from 'pizzip';

interface GenerateContractInput {
  userId: number;
  enterpriseId: number;
  templateType: ContractTemplateType;
}

interface GenerateContractOutput {
  contractId: string;
  envelopeId?: string;
  signingUrl?: string;
}

export class GenerateContractUseCase {
  constructor(
    private readonly contractRepository: ContractRepository,
    private readonly enterpriseRepository: EnterpriseRepository,
    private readonly userRepository: UsersRepository
  ) {}

  async execute({ userId, enterpriseId, templateType }: GenerateContractInput): Promise<GenerateContractOutput> {
    try {
      console.log('üîç Buscando informa√ß√µes do usu√°rio e empresa...');

      const enterprise = await this.enterpriseRepository.findById(enterpriseId);
      if (!enterprise) throw new Error(`A empresa com ID ${enterpriseId} n√£o existe.`);

      const user = await this.userRepository.findById(userId);
      if (!user) throw new Error(`O usu√°rio com ID ${userId} n√£o foi encontrado.`);

      const template = await this.contractRepository.findTemplateByType(templateType);
      if (!template || !template.filePath) throw new Error(`Template do tipo ${templateType} n√£o encontrado.`);

      const filePath = path.join(__dirname, '../../../', template.filePath);
      if (!fs.existsSync(filePath)) {
        throw new Error(`O arquivo do template n√£o foi encontrado: ${filePath}`);
      }

      console.log('üìÇ Carregando template DOCX:', filePath);

      // Ler o arquivo DOCX
      const fileBuffer = fs.readFileSync(filePath);
      const zip = new PizZip(fileBuffer);
      const doc = new Docxtemplater(zip, { paragraphLoop: true, linebreaks: true });

      doc.compile(); // üîπ Compila antes de renderizar

      // üîç **Defini√ß√£o dos placeholders a serem substitu√≠dos**
      const placeholders = {
        INVESTOR: `${user.firstName} ${user.lastName}`,
        // type: enterprise.type || 'Tipo n√£o informado',
        State: enterprise.state || 'Estado n√£o informado',
        Country: enterprise.country || 'Pa√≠s n√£o informado',
        address: enterprise.address || 'Endere√ßo n√£o informado',
      };

      console.log('üîÑ Substituindo placeholders no contrato:', placeholders);

      doc.render(placeholders);

      const filledContractBuffer = doc.getZip().generate({ type: 'nodebuffer' });

      if (!filledContractBuffer || filledContractBuffer.length === 0) {
        throw new Error('Erro: O arquivo gerado est√° vazio.');
      }

      console.log('‚úÖ Contrato preenchido, tamanho:', filledContractBuffer.length, 'bytes');

      const base64Docx = filledContractBuffer.toString('base64');

      if (!base64Docx || base64Docx.length === 0) {
        throw new Error('Erro: O contrato convertido para Base64 est√° vazio.');
      }

      console.log('‚úÖ Documento convertido para Base64, tamanho:', base64Docx.length, 'bytes');

      const contract = await this.contractRepository.create({
        type: ContractType.MONEY,
        templateType,
        user: { connect: { id: userId } },
        enterprise: { connect: { id: enterpriseId } },
        filePath: template.filePath,
        status: ContractStatus.PENDING,
      });

      const accessToken = await getDocusignAccessToken();
      if (!accessToken) throw new Error('Falha ao obter o token de acesso do DocuSign.');

      console.log('üìÑ Criando envelope no DocuSign...');

      const envelopeId = await createEnvelopeOnDocusign({
        userId,
        userEmail: user.email,
        userName: `${user.firstName} ${user.lastName}`,
        enterprise,
        contract: {
          ...contract,
          content: base64Docx, // üî• Passa corretamente o Base64 aqui!
        },
      });

      if (!envelopeId) throw new Error('Falha ao gerar o envelope no DocuSign.');

      console.log('‚úÖ Envelope gerado com sucesso:', envelopeId);

      await this.contractRepository.setEnvelopeId(contract.id, envelopeId);

      const signingUrl = await getEmbeddedSigningUrl({
        envelopeId,
        userId,
        userName: `${user.firstName} ${user.lastName}`,
        userEmail: user.email,
      });

      if (!signingUrl) throw new Error('Erro ao gerar a URL de assinatura.');

      console.log('‚úÖ URL de assinatura gerada com sucesso:', signingUrl);

      return { contractId: contract.id, envelopeId, signingUrl };

    } catch (error: any) {
      console.error(`‚ùå Erro ao gerar contrato: ${error.message}`, { stack: error.stack });
      throw new Error(`Erro ao gerar contrato: ${error.message}`);
    }
  }
}
